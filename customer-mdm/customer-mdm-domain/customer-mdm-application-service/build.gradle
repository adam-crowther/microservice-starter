plugins {
  id 'java'
  id 'checkstyle'
  id 'jacoco'
  alias pluginLibs.plugins.spotbugs
  id 'groovy'
}

apply from: "${rootDir}/java.gradle"
apply plugin: "groovy"

compileJava {
  options.compilerArgs += [
        '-Amapstruct.defaultComponentModel=spring',
        '-Amapstruct.defaultInjectionStrategy=constructor',
        '-Amapstruct.unmappedTargetPolicy=ERROR',
        '-Amapstruct.verbose=false',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.suppressGeneratorTimestamp=true'
  ]
}

dependencies {
  implementation project(":common:common-domain")
  implementation project(":common:common-application")
  implementation project(":common:common-helper")
  implementation project(":customer-mdm:customer-mdm-domain:customer-mdm-domain-core")
  implementation project("::common:common-saga")

  implementation libs.jakarta.annotation.api
  implementation libs.jakarta.validation.api
  implementation libs.lombok.core
  implementation libs.mapstruct.core
  implementation libs.slf4j.api
  implementation libs.spotbugs.annotations
  implementation libs.spring.beans
  implementation libs.spring.boot.core
  implementation libs.spring.context
  implementation libs.spring.tx

  annotationProcessor libs.lombok.core
  annotationProcessor libs.lombok.mapstruct.binding
  annotationProcessor libs.mapstruct.processor
  annotationProcessor libs.spring.boot.configuration.processor

  testImplementation libs.hamcrest.core
  testImplementation libs.junit5.api
  testImplementation libs.mockito.core
  testImplementation libs.mockito.junit.jupiter
  testImplementation libs.spring.boot.autoconfigure
  testImplementation libs.spring.boot.test.core
  testImplementation libs.spring.test

  testImplementation libs.bundles.spock
  testImplementation libs.equalsverifier
  testImplementation libs.jakarta.inject.api
  testImplementation libs.spring.test

  testRuntimeOnly libs.mockito.inline
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}
package com.acroteq.ticketing.common.application.exception.handler;

import com.google.common.collect.ImmutableList;
import jakarta.annotation.Nullable;
import lombok.Builder;
import lombok.NonNull;
import lombok.Value;

import java.util.List;
import java.util.Optional;

/**
 * This is a hand-implemented version of the Problem class that would normally be generated by openapi. There's no
 * openapi interface here to generate, and we need this to set up the centralised generic error handling that will be
 * used by our Spring microservices that expose REST APIs.
 */
@Builder
@Value
public class Problem {

  @NonNull Integer code;

  @NonNull String reason;

  @NonNull String message;

  @Nullable
  String i18nCode;

  @Nullable
  ImmutableList<String> i18nParameters;

  /* Lombok lets you customise the generated builder */
  @SuppressWarnings({ "PublicInnerClass", "unused" })
  public static class ProblemBuilder {

    public ProblemBuilder i18nParameters(@Nullable final List<String> i18nParameters) {
      this.i18nParameters = Optional.ofNullable(i18nParameters)
                                    .map(ImmutableList::copyOf)
                                    .orElse(ImmutableList.of());
      return this;
    }
  }
}
